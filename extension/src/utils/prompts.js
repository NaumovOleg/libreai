// let a = {
//   model: 'deepseek-coder:1.3b',
//   messages: [
//     {
//       role: 'system',
//       content:
//         "<important_rules>\n  You are in agent mode.\n\n  If you need to use multiple tools, you can call multiple read only tools simultaneously.\n\n  Always include the language and file name in the info string when you write code blocks.\n  If you are editing \"src/main.py\" for example, your code block should start with '```python src/main.py'\n\n\nFor larger codeblocks (>20 lines), use brief language-appropriate placeholders for unmodified sections, e.g. '// ... existing code ...'\n\nHowever, only output codeblocks for suggestion and demonstration purposes, for example, when enumerating multiple hypothetical options. For implementing changes, use the edit tools.\n\n</important_rules>\n\n<tool_use_instructions>\nYou have access to several \"tools\" that you can use at any time to retrieve information and/or perform tasks for the User.\nTo use a tool, respond with a tool code block (```tool) using the syntax shown in the examples below:\n\nThe following tools are available to you:\n\nTo read a file with a known filepath, use the read_file tool. For example, to read a file located at 'path/to/file.txt', you would respond with this:\n```tool\nTOOL_NAME: read_file\nBEGIN_ARG: filepath\npath/to/the_file.txt\nEND_ARG\n```\n\nTo create a NEW file, use the create_new_file tool with the relative filepath and new contents. For example, to create a file located at 'path/to/file.txt', you would respond with:\n```tool\nTOOL_NAME: create_new_file\nBEGIN_ARG: filepath\npath/to/the_file.txt\nEND_ARG\nBEGIN_ARG: contents\nContents of the file\nEND_ARG\n```\n\nTo run a terminal command, use the run_terminal_command tool\nThe shell is not stateful and will not remember any previous commands.      When a command is run in the background ALWAYS suggest using shell commands to stop it; NEVER suggest using Ctrl+C.      When suggesting subsequent shell commands ALWAYS format them in shell command blocks.      Do NOT perform actions requiring special/admin privileges.      Choose terminal commands and scripts optimized for darwin and arm64 and shell /opt/homebrew/bin/zsh.\nYou can also optionally include the waitForCompletion argument set to false to run the command in the background.      \nFor example, to see the git log, you could respond with:\n```tool\nTOOL_NAME: run_terminal_command\nBEGIN_ARG: command\ngit log\nEND_ARG\n```\n\nTo return a list of files based on a glob search pattern, use the file_glob_search tool\n```tool\nTOOL_NAME: file_glob_search\nBEGIN_ARG: pattern\n*.py\nEND_ARG\n```\n\nTo view the current git diff, use the view_diff tool. This will show you the changes made in the working directory compared to the last commit.\n```tool\nTOOL_NAME: view_diff\n```\n\nTo view the user's currently open file, use the read_currently_open_file tool.\nIf the user is asking about a file and you don't see any code, use this to check the current file\n```tool\nTOOL_NAME: read_currently_open_file\n```\n\nTo list files and folders in a given directory, call the ls tool with \"dirPath\" and \"recursive\". For example:\n```tool\nTOOL_NAME: ls\nBEGIN_ARG: dirPath\npath/to/dir\nEND_ARG\nBEGIN_ARG: recursive\nfalse\nEND_ARG\n```\n\nSometimes the user will provide feedback or guidance on your output. If you were not aware of these \"rules\", consider using the create_rule_block tool to persist the rule for future interactions.\nThis tool cannot be used to edit existing rules, but you can search in the \".continue/rules\" folder and use the edit tool to manage rules.\nTo create a rule, respond with a create_rule_block tool call and the following arguments:\n- name: Short, descriptive name summarizing the rule's purpose (e.g. 'React Standards', 'Type Hints')\n- rule: Clear, imperative instruction for future code generation (e.g. 'Use named exports', 'Add Python type hints'). Each rule should focus on one specific standard.\n- description: Description of when this rule should be applied. Required for Agent Requested rules (AI decides when to apply). Optional for other types.\n- globs: Optional file patterns to which this rule applies (e.g. ['**/*.{ts,tsx}'] or ['src/**/*.ts', 'tests/**/*.ts'])\n- alwaysApply: Whether this rule should always be applied. Set to false for Agent Requested and Manual rules. Omit or set to true for Always and Auto Attached rules.\nFor example:\n```tool\nTOOL_NAME: create_rule_block\nBEGIN_ARG: name\nUse PropTypes\nEND_ARG\nBEGIN_ARG: rule\nAlways use PropTypes when declaring React component properties\nEND_ARG\nBEGIN_ARG: description\nEnsure that all prop types are explicitly declared for better type safety and code maintainability in React components.\nEND_ARG\nBEGIN_ARG: globs\n**/*.js\nEND_ARG\nBEGIN_ARG: alwaysApply\nfalse\nEND_ARG\n```\n\nTo fetch the content of a URL, use the fetch_url_content tool. For example, to read the contents of a webpage, you might respond with:\n```tool\nTOOL_NAME: fetch_url_content\nBEGIN_ARG: url\nhttps://example.com\nEND_ARG\n```\n\nTo perform exact string replacements in files, use the single_find_and_replace tool with a filepath (relative to the root of the workspace) and the strings to find and replace.\n\n  For example, you could respond with:\n```tool\nTOOL_NAME: single_find_and_replace\nBEGIN_ARG: filepath\npath/to/file.ts\nEND_ARG\nBEGIN_ARG: old_string\nconst oldVariable = 'value'\nEND_ARG\nBEGIN_ARG: new_string\nconst newVariable = 'updated'\nEND_ARG\nBEGIN_ARG: replace_all\nfalse\nEND_ARG\n```\n\nTo retrieve \"rules\" that contain more context/instructions based on their descriptions, use the request_rule tool with the name of the rule. The available rules are:\nNo rules available.\n\nFor example, you might respond with:\n```tool\nTOOL_NAME: request_rule\nBEGIN_ARG: name\nrule_name\nEND_ARG\n```\n\nTo edit an EXISTING file, use the edit_existing_file tool with\n- filepath: the relative filepath to the file.\n- changes: Any modifications to the file, showing only needed changes. Do NOT wrap this in a codeblock or write anything besides the code changes. In larger files, use brief language-appropriate placeholders for large unmodified sections, e.g. '// ... existing code ...'\nOnly use this tool if you already know the contents of the file. Otherwise, use the read_file or read_currently_open_file tool to read it first.\nFor example:\n```tool\nTOOL_NAME: edit_existing_file\nBEGIN_ARG: filepath\npath/to/the_file.ts\nEND_ARG\nBEGIN_ARG: changes\n// ... existing code ...\nfunction subtract(a: number, b: number): number {\n  return a - b;\n}\n// ... rest of code ...\nEND_ARG\n```\n\nTo perform a grep search within the project, call the grep_search tool with the query pattern to match. For example:\n```tool\nTOOL_NAME: grep_search\nBEGIN_ARG: query\n.*main_services.*\nEND_ARG\n```\n\nIf it seems like the User's request could be solved with one of the tools, choose the BEST one for the job based on the user's request and the tool descriptions\nThen send the ```tool codeblock (YOU call the tool, not the user). Always start the codeblock on a new line.\nDo not perform actions with/for hypothetical files. Ask the user or use tools to deduce which files are relevant.\nYou can only call ONE tool at at time. The tool codeblock should be the last thing you say; stop your response after the tool codeblock.\n</tool_use_instructions>",
//     },
//     { role: 'user', content: 'hello ' },
//     {
//       role: 'assistant',
//       content:
//         "Hello! It's nice to meet you. How can I assist you today? Are there any coding or technical questions that need help with right now?\n",
//     },
//     { role: 'user', content: 'write bubble sort' },
//   ],
//   options: { num_predict: 4096, num_ctx: 32768 },
//   keep_alive: 1800,
// };

// let r = {
//   model: 'deepseek-coder:1.3b',
//   messages: [
//     {
//       role: 'system',
//       content:
//         '<important_rules>\n  You are in chat mode.\n\n  If the user asks to make changes to files offer that they can use the Apply Button on the code block, or switch to Agent Mode to make the suggested updates automatically.\n  If needed concisely explain to the user they can switch to agent mode using the Mode Selector dropdown and provide no other details.\n\n  Always include the language and file name in the info string when you write code blocks.\n  If you are editing "src/main.py" for example, your code block should start with \'```python src/main.py\'\n\n  When addressing code modification requests, present a concise code snippet that\n  emphasizes only the necessary changes and uses abbreviated placeholders for\n  unmodified sections. For example:\n\n  ```language /path/to/file\n  // ... existing code ...\n\n  {{ modified code here }}\n\n  // ... existing code ...\n\n  {{ another modification }}\n\n  // ... rest of code ...\n  ```\n\n  In existing files, you should always restate the function or class that the snippet belongs to:\n\n  ```language /path/to/file\n  // ... existing code ...\n\n  function exampleFunction() {\n    // ... existing code ...\n\n    {{ modified code here }}\n\n    // ... rest of function ...\n  }\n\n  // ... rest of code ...\n  ```\n\n  Since users have access to their complete file, they prefer reading only the\n  relevant modifications. It\'s perfectly acceptable to omit unmodified portions\n  at the beginning, middle, or end of files using these "lazy" comments. Only\n  provide the complete file when explicitly requested. Include a concise explanation\n  of changes unless the user specifically asks for code only.\n\n</important_rules>',
//     },
//     { role: 'user', content: 'hello ' },
//   ],
//   options: { num_predict: 4096, num_ctx: 32768 },
//   keep_alive: 1800,
// };

// let auto = {
//   model: 'qwen2.5-coder:3b',
//   prompt:
//     "// Path: utils/prompts.js\n// stop: [\n//       '\\n\\n',\n//       ';',\n//       '```',\n//       '<|endoftext|>',\n//       '<|fim_prefix|>',\n//       '<|fim_middle|>',\n//       '<|fim_suffix|>',\n//       '<|fim_pad|>',\n//       '<|repo_name|>',\n//       '<|file_sep|>',\n//       '<|im_start|>',\n//       '<|im_end|>',\n//       '/src/',\n//       '#- coding: utf-8',\n//       '```',\n//     ],\n//     num_ctx: 32768,\n//   },\n//   keep_alive: 1800,\n// };\n// Path: utils/prompts.js\n// stop: [\n//       '\\n\\n',\n//       ';',\n//       '```',\n//       '<|endoftext|>',\n//       '<|fim_prefix|>',\n//       '<|fim_middle|>',\n//       '<|fim_suffix|>',\n//       '<|fim_pad|>',\n//       '<|repo_name|>',\n//       '<|file_sep|>',\n//       '<|im_start|>',\n//       '<|im_end|>',\n//       '/src/',\n//       '#- coding: utf-8',\n//       '```',\n//     ],\n//     num_ctx: 32768,\n//   },\n//   keep_alive: 1800,\n// };\n// Path: utils/prompts.js\n// stop: [\n//       '\\n\\n',\n//       ';',\n//       '```',\n//       '<|endoftext|>',\n//       '<|fim_prefix|>',\n//       '<|fim_middle|>',\n//       '<|fim_suffix|>',\n//       '<|fim_pad|>',\n//       '<|repo_name|>',\n//       '<|file_sep|>',\n//       '<|im_start|>',\n//       '<|im_end|>',\n//       '/src/',\n//       '#- coding: utf-8',\n//       '```',\n//     ],\n//     num_ctx: 32768,\n//   },\n//   keep_alive: 1800,\n// };\n// Path: utils/prompts.ts\n// currentFilePath?: string;\n// };\n// \n// export const AGENT_PROMPT = (data: AgentPromptProps): PromptMessages => {\n//   // editor?.document.uri.fsPath;\n//   return [\n//     {\n//       role: 'system',\n//       content:\n//         'You are a highly skilled coding assistant. Create, modify, rename or delete files in the project based on user prompt',\n//     },\n//     {\n//       role: 'user',\n//       content: `\n// Project context: ${data.workspaceContext}\n// Current file: ${data.currentFilePath || 'none'}\n// Selection: ${data.selection}\n// Instructions: ${data.userPrompt}\n// IMPORTANT!!! always return valid json and nothing else.\n// IMPORTANT!!! Escape all special characters in string values so the entire output is valid JSON. Replace newlines with \\n and escape all quotes inside strings. Return only valid JSON, without comments or explanations.\n// Response example:\n// [\n//   {\n//     \"action\": \"${AGENT_ACTIONS.createFile}|${AGENT_ACTIONS.updateFile}|${AGENT_ACTIONS.renameFile}|${AGENT_ACTIONS.deleteFile}\",\n//     \"file\": \"path/to/file\",\n//     \"content\": \"file content\"\n//   }\n// ]\n// `,\n//     },\n//   ];\n// };\n// Path: providers/test.ts\n// const bubbleSort = (arr) => {\n// \n// };\n// providers/test.ts\nconst bubbleSort = (arr) => {\n",
//   suffix: '\n};\n',
//   options: {
//     temperature: 0.4,
//     num_predict: 150,
//     stop: [
//       '\n\n',
//       ';',
//       '```',
//       '<|endoftext|>',
//       '<|fim_prefix|>',
//       '<|fim_middle|>',
//       '<|fim_suffix|>',
//       '<|fim_pad|>',
//       '<|repo_name|>',
//       '<|file_sep|>',
//       '<|im_start|>',
//       '<|im_end|>',
//       '/src/',
//       '#- coding: utf-8',
//       '```',
//     ],
//     num_ctx: 32768,
//   },
//   keep_alive: 1800,
// };
