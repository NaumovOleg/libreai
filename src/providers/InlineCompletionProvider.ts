import * as vscode from 'vscode';

import { AIClient } from '../aiClient';
import { gatherWorkspaceContext } from '../workspaceContext';

export class InlineCompletionProvider implements vscode.InlineCompletionItemProvider {
  private aiClient: AIClient;

  constructor() {
    this.aiClient = AIClient.fromSettings();
  }

  async provideInlineCompletionItems(
    document: vscode.TextDocument,
    position: vscode.Position,
    context: vscode.InlineCompletionContext,
    token: vscode.CancellationToken,
  ): Promise<vscode.InlineCompletionList> {
    const linePrefix = document.lineAt(position).text.slice(0, position.character);
    const selection = document.getText(document.getWordRangeAtPosition(position)) || '';
    const workspaceContext = await gatherWorkspaceContext(6, 6000);

    const prompt = `
You are a coding assistant. Complete the following code snippet:
Current line or selection:
${selection || linePrefix}

Workspace context:
${workspaceContext}
`;

    console.log(prompt);

    let suggestionText = '';
    try {
      suggestionText = await this.aiClient.chat([
        { role: 'system', content: 'You are a helpful coding assistant.' },
        { role: 'user', content: prompt },
      ]);
    } catch (e) {
      suggestionText = 'ddddddddddddddd';
      console.error('AI inline completion error:', e);
    }

    if (!suggestionText) return { items: [] };

    // Multi-line snippet
    const item = new vscode.InlineCompletionItem(
      new vscode.SnippetString(suggestionText),
      new vscode.Range(position, position),
    );

    Object.assign(item, {
      detail: 'AI Suggestion',
      documentation: 'Generated by AI',
    });

    // item.detail = "AI Suggestion";
    // item.documentation = "Generated by AI";

    return { items: [item] };
  }
}
